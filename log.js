// Generated by CoffeeScript 1.7.1
(function() {
  var Debugger, db;

  Debugger = (function() {
    var debug, extend, instance, instanced;

    debug = false;

    instance = null;

    instanced = false;

    extend = function(obj) {
      var i, length, prop, source;
      if ((typeof obj) !== 'object') {
        return obj;
      }
      i = 1;
      length = arguments.length;
      while (i < length) {
        source = arguments[i];
        for (prop in source) {
          if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
          }
        }
        i++;
      }
      return obj;
    };

    function Debugger() {
      if (instanced === true) {
        return instance;
      }
      instance = this;
      instanced = true;
    }

    Debugger.prototype.enable = function() {
      debug = console ? true : false;
      return this;
    };

    Debugger.prototype.disable = function() {
      debug = false;
      return this;
    };

    Debugger.prototype.styles = {
      colors: {
        aqua: '#7FDBFF',
        blue: '#0074D9',
        navy: '#001F3F',
        teal: '#39CCCC',
        green: '#2ECC40',
        olive: '#3D9970',
        lime: '#01FF70',
        yellow: '#FFDC00',
        orange: '#FF851B',
        red: '#FF4136',
        fuchsia: '#F012BE',
        purple: '#B10DC9',
        maroon: '#85144B',
        white: '#fff',
        silver: '#ddd',
        gray: '#aaa',
        black: '#111'
      },
      sizes: {
        xxs: 'xx-small',
        xs: 'x-small',
        s: 'small',
        m: 'medium',
        l: 'large',
        xl: 'x-large',
        xxl: 'xx-large'
      },
      style_sets: {
        warn: 'background: #DA251D; color: white;font-weight: bold; font-size: x-large; border-radius: 5px; padding: 0.2em; line-height:2;',
        cmd: 'background: #000; color: #05A805; font-weight: bold; font-size: large; font-family:Courier; border-radius: 5px; padding: 0.2em; line-height:2;'
      }
    };

    Debugger.prototype.log = function() {
      var color, font_size, last_arg, last_arg_arr, size, style_string;
      if (debug === false) {
        return this;
      }
      if (arguments.length === 2 && typeof arguments[1] === 'string') {
        last_arg = arguments[1];
        last_arg_arr = last_arg.split('-');
        if (last_arg_arr.length === 2) {
          color = last_arg_arr[0];
          size = last_arg_arr[1];
          font_size = '';
          if (this.styles.colors.hasOwnProperty(color)) {
            if (size && this.styles.sizes.hasOwnProperty(size)) {
              font_size = 'font-size:';
              if (/^\d.*$/.test(size)) {
                font_size += size + 'px;';
              } else {
                font_size += this.styles.sizes[size] + ';';
              }
            }
            style_string = ("color:" + this.styles.colors[color] + ";") + font_size;
          }
        } else {
          if (this.styles.style_sets.hasOwnProperty(last_arg)) {
            style_string = this.styles.style_sets[last_arg];
          }
          if (this.styles.colors.hasOwnProperty(last_arg)) {
            style_string = "color:" + this.styles.colors[last_arg] + ";";
          }
        }
        if (style_string) {
          console.log('%c' + arguments[0], style_string);
          return this;
        }
      }
      console.log.apply(console, arguments);
      return this;
    };

    Debugger.prototype.set = function(style, obj) {
      if (style === 'style') {
        this.styles.style_sets = extend(this.styles.style_sets, obj);
      }
      if (style === 'color') {
        this.styles.colors = extend(this.styles.colors, obj);
      }
      return this;
    };

    return Debugger;

  })();

  db = new Debugger();

  window.log = function() {
    return db.log.apply(db, arguments);
  };

  window.log.enable = function() {
    return db.enable();
  };

  window.log.disable = function() {
    return db.disable();
  };

  window.log.set = function() {
    return db.set.apply(db, arguments);
  };

}).call(this);
